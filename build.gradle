//plugins {
//    id 'org.springframework.boot' version '2.2.0.RELEASE'
//    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
//    id 'java'
//}
//
//group = 'com.cholesBear'
//version = '0.0.1'
//sourceCompatibility = '1.8'
//
//configurations {
//    developmentOnly
//    runtimeClasspath {
//        extendsFrom developmentOnly
//    }
//    compileOnly {
//        extendsFrom annotationProcessor
//    }
//}
//
//repositories {
//    mavenCentral()
//}
//
//dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    compileOnly 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    annotationProcessor 'org.projectlombok:lombok'
//    testImplementation('org.springframework.boot:spring-boot-starter-test') {
//        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//    }
//}
//
//test {
//    useJUnitPlatform()
//}
buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        /* 添加插件依赖路径（通过jar方式） */
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}" as Object)
    }
}

/* 所有子项目的通用配置 */
subprojects {
    /* 使用二进制插件 */
    apply plugin: 'java' /* java是Gradle的核心插件，是内置的，内置插件不需要配置依赖路径 */
    apply plugin: 'idea' /* 同上  让Gradle自动生成Intellij的项目文件*/
    /* 注意gradle插件不再自动应用，所以这里需要指定 */
    apply plugin: 'org.springframework.boot'
    /* 依赖管理插件仍然是一个spring-boot-gradle-plugin传递依赖，所以无需在build.gradle配置中明确列出此依赖。 */
    apply plugin: 'io.spring.dependency-management' /* 依赖管理，用来传递spring的依赖 */

    group = 'com.cholesBear'
    version = '0.0.1' /* 项目版本 */
    /* 指定jdk版本 */
    sourceCompatibility = '1.8'
    /* java编译的时候缺省状态下会因为中文字符而失败 */
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    /* 添加通用依赖 */
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        // https://mvnrepository.com/artifact/org.apache.dubbo/dubbo
        compile group: 'org.apache.dubbo', name: 'dubbo', version: '2.7.3'
        // https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter
        compile group: 'org.apache.dubbo', name: 'dubbo-spring-boot-starter', version: '2.7.3'
        // https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper
        compile group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.5.3-beta', ext: 'pom'
        // https://mvnrepository.com/artifact/org.apache.curator/curator-recipes
        compile group: 'org.apache.curator', name: 'curator-recipes', version: '4.2.0'
        // https://mvnrepository.com/artifact/org.apache.curator/curator-framework
        compile group: 'org.apache.curator', name: 'curator-framework', version: '4.2.0'

        compileOnly 'org.projectlombok:lombok'
//        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}
